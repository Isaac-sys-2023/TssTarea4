package model;

/**
 *
 * @author chichimon
 */

import java.io.File;

public class Partido {
    private String nombre;
    private double media;
    private double desviacion;
    private File fotoCandidato;
    private File logoPartido;
    private String colorHex;

    public Partido(String nombre, double media, double desviacion, File fotoCandidato, File logoPartido, String colorHex) {
        this.nombre = nombre;
        this.media = media;
        this.desviacion = desviacion;
        this.fotoCandidato = fotoCandidato;
        this.logoPartido = logoPartido;
        this.colorHex = colorHex;
    }

    public String getNombre() {
        return nombre;
    }

    public double getMedia() {
        return media;
    }

    public double getDesviacion() {
        return desviacion;
    }

    public File getFotoCandidato() {
        return fotoCandidato;
    }

    public File getLogoPartido() {
        return logoPartido;
    }

    public String getColorHex() {
        return colorHex;
    }

    // Para usar el color como Color de Java:
    public java.awt.Color getColorAWT() {
        return java.awt.Color.decode(colorHex);
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

package model;

/**
 *
 * @author chichimon
 */

import java.util.*;
public class DHondt {
    
    public static Map<String, Integer> asignarEscanos(Map<String, Double> votos, int escanos) {
        Map<String, Integer> asignados = new HashMap<>();
        for (String partido : votos.keySet()) {
            asignados.put(partido, 0);
        }

        List<Map.Entry<String, Double>> cocientes = new ArrayList<>();

        for (String partido : votos.keySet()) {
            double voto = votos.get(partido);
            for (int i = 1; i <= escanos; i++) {
                cocientes.add(new AbstractMap.SimpleEntry<>(partido, voto / i));
            }
        }

        cocientes.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));

        for (int i = 0; i < escanos; i++) {
            String partido = cocientes.get(i).getKey();
            asignados.put(partido, asignados.get(partido) + 1);
        }

        return asignados;
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

package model;

/**
 *
 * @author chichimon
 */

import java.util.*;
public class Simulador {
    private List<Partido> partidos;
    //private Random rand = new Random();
    Random rand = new Random(leerSeedDesdeArchivo());

    public Simulador(List<Partido> partidos) {
        this.partidos = partidos;
    }

    public Map<String, Double> simularVotacion() {
        Map<String, Double> votos = new HashMap<>();
        double suma = 0;

        for (Partido p : partidos) {
            double valor = rand.nextGaussian() * p.getDesviacion() + p.getMedia();
            if (valor < 0) valor = 0;
            votos.put(p.getNombre(), valor);
            suma += valor;
        }

        // Normalizar
        for (String nombre : votos.keySet()) {
            votos.put(nombre, (votos.get(nombre) / suma) * 100);
        }

        return votos;
    }

    public boolean haySegundaVuelta(Map<String, Double> resultados) {
        List<Map.Entry<String, Double>> ordenados = new ArrayList<>(resultados.entrySet());
        ordenados.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));

        double primero = ordenados.get(0).getValue();
        double segundo = ordenados.get(1).getValue();

        return !(primero > 50 || (primero >= 40 && primero - segundo >= 10));
    }
    
    private long leerSeedDesdeArchivo() {
        try {
            List<String> lineas = java.nio.file.Files.readAllLines(java.nio.file.Paths.get("simulacion_seed.txt"));
            return Long.parseLong(lineas.get(0).trim());
        } catch (Exception e) {
            System.err.println("Error leyendo simulacion_seed.txt. Usando semilla aleatoria.");
            return System.currentTimeMillis(); // fallback si el archivo no existe
        }
    }

}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

package model;

/**
 *
 * @author chichimon
 */

import java.util.*;

public class MonteCarlo {
    private Simulador simulador;
    private int repeticiones;

    public MonteCarlo(Simulador simulador, int repeticiones) {
        this.simulador = simulador;
        this.repeticiones = repeticiones;
    }

    public void ejecutar() {
        Map<String, Double> sumaPorcentajes = new HashMap<>();
        Map<String, Integer> ganaPresidencia = new HashMap<>();
        int segundaVueltaCount = 0;

        Map<String, Integer> totalEscSenado = new HashMap<>();
        Map<String, Integer> totalEscDip = new HashMap<>();

        for (int i = 0; i < repeticiones; i++) {
            Map<String, Double> votos = simulador.simularVotacion();
            List<Map.Entry<String, Double>> orden = new ArrayList<>(votos.entrySet());
            orden.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));
            String ganador = orden.get(0).getKey();

            ganaPresidencia.put(ganador, ganaPresidencia.getOrDefault(ganador, 0) + 1);

            for (String partido : votos.keySet()) {
                sumaPorcentajes.put(partido, sumaPorcentajes.getOrDefault(partido, 0.0) + votos.get(partido));
            }

            if (simulador.haySegundaVuelta(votos)) {
                segundaVueltaCount++;
            }

            // Asignación de escaños
            Map<String, Integer> escSenado = DHondt.asignarEscanos(votos, 4);
            for (String p : escSenado.keySet()) {
                totalEscSenado.put(p, totalEscSenado.getOrDefault(p, 0) + escSenado.get(p));
            }

            Map<String, Integer> escDip = DHondt.asignarEscanos(votos, 10);
            for (String p : escDip.keySet()) {
                totalEscDip.put(p, totalEscDip.getOrDefault(p, 0) + escDip.get(p));
            }
        }

        System.out.println("\n===== RESULTADOS DE " + repeticiones + " SIMULACIONES =====\n");

        System.out.println("Probabilidad de segunda vuelta: " + ((segundaVueltaCount * 100.0) / repeticiones) + "%\n");

        System.out.println("--- Promedio de porcentaje de votos ---");
        for (String p : sumaPorcentajes.keySet()) {
            double promedio = sumaPorcentajes.get(p) / repeticiones;
            System.out.printf("%s: %.2f%%\n", p, promedio);
        }

        System.out.println("\n--- Frecuencia de victoria presidencial ---");
        for (String p : ganaPresidencia.keySet()) {
            double porcentaje = ganaPresidencia.get(p) * 100.0 / repeticiones;
            System.out.printf("%s: %.2f%%\n", p, porcentaje);
        }

        System.out.println("\n--- Promedio de escaños en Senado ---");
        for (String p : totalEscSenado.keySet()) {
            double promedio = totalEscSenado.get(p) / (double) repeticiones;
            System.out.printf("%s: %.2f\n", p, promedio);
        }

        System.out.println("\n--- Promedio de escaños en Diputados ---");
        for (String p : totalEscDip.keySet()) {
            double promedio = totalEscDip.get(p) / (double) repeticiones;
            System.out.printf("%s: %.2f\n", p, promedio);
        }
    }
}



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


package model;

/**
 *
 * @author chichimon
 */

import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.io.File;

public class ExportadorResultados {
    public static void exportarCSV(String nombreArchivo, Map<String, Double> porcentajes,
                                   Map<String, Integer> victorias, int totalSimulaciones,
                                   Map<String, Integer> escSenado, Map<String, Integer> escDiputados,
                                   int cuentaSegundaVuelta) {

        try {
            // Verifica o crea la carpeta 'resultados'
            File carpeta = new File("resultados");
            if (!carpeta.exists()) {
                carpeta.mkdirs();  // crea la carpeta si no existe
            }

            FileWriter writer = new FileWriter("resultados/" + nombreArchivo);
            writer.write("Partido;Promedio Voto %;Promedio Escaños Senado;Promedio Escaños Diputados"
                    + ";Prob Victoria Presidencial %;Prob. Segunda Vuelta %\n");
            
            for (String partido : porcentajes.keySet()) {
                double promedioVoto = porcentajes.get(partido) / totalSimulaciones;
                double promedioSenado = escSenado.getOrDefault(partido, 0) / (double) totalSimulaciones;
                double promedioDip = escDiputados.getOrDefault(partido, 0) / (double) totalSimulaciones;
                double porcentajeVictoria = victorias.getOrDefault(partido, 0) * 100.0 / totalSimulaciones;
                double probSegundaVuelta = cuentaSegundaVuelta * 100.0 / totalSimulaciones;

                writer.write(String.format("%s;%.2f;%.2f;%.2f;%.2f;%.2f\n",
                        partido, promedioVoto, promedioSenado, promedioDip, porcentajeVictoria, probSegundaVuelta));
            }
            writer.close();
            System.out.println("✅ Archivo creado: " + nombreArchivo);
            
            // Mostrar en consola (tabla rápida)
            System.out.println("\n--- RESULTADOS: " + nombreArchivo.toUpperCase() + " ---");
            System.out.printf("%-10s %-15s %-20s %-22s %-20s\n", 
                "Partido", "Voto (%)", "Escaños Senado", "Escaños Diputados", "Victoria (%)");

            for (String partido : porcentajes.keySet()) {
                double promedioVoto = porcentajes.get(partido) / totalSimulaciones;
                double promedioSenado = escSenado.getOrDefault(partido, 0) / (double) totalSimulaciones;
                double promedioDip = escDiputados.getOrDefault(partido, 0) / (double) totalSimulaciones;
                double porcentajeVictoria = victorias.getOrDefault(partido, 0) * 100.0 / totalSimulaciones;

                System.out.printf("%-10s %-15.2f %-20.2f %-22.2f %-20.2f\n",
                        partido, promedioVoto, promedioSenado, promedioDip, porcentajeVictoria);
            }

            // Mostrar probabilidad de segunda vuelta (una vez por archivo)
            double probSegundaVuelta = cuentaSegundaVuelta * 100.0 / totalSimulaciones;
            System.out.println("Probabilidad de segunda vuelta: " + String.format("%.2f%%", probSegundaVuelta));
            System.out.println("----------------------------------------------");
        } catch (IOException e) {
            System.err.println("Error al escribir archivo " + nombreArchivo);
        }
    }
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

EN VIEW:
package view;

/**
 *
 * @author chichimon
 */

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import model.DHondt;
import model.ExportadorResultados;
import model.Partido;
import model.Simulador;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

public class SimulacionElectoralGUI extends JFrame {
    private java.util.List<Partido> partidos = new ArrayList<>();
    private JButton btnAgregar, btnCalcular, btnExportar;
    private JPanel panelChart, panelPartidos;
    private JLabel lblSecondRound;
    private JComboBox<String> cbDepto, cbChartType;
    private Map<String, ImageIcon> mapas = new HashMap<>();
    private Map<String, Double> resultadoVotos = new HashMap<>();
    private Map<String, Double> resultadoEscSenado = new HashMap<>();
    private Map<String, Double> resultadoEscDip = new HashMap<>();
    private Map<String, Double> resultadoVictoria = new HashMap<>();
    private double probSegundaVuelta = 0;    
    private Map<String, Map<String, Map<String, Double>>> resultadosPorDepto = new HashMap<>();    
    private JLabel lblMap;    
    private int sims = 0;

    public SimulacionElectoralGUI() {
        setTitle("Simulación Electoral");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1200, 800);
        setLocationRelativeTo(null);
        initComponents();
        precargarPartidos();
    }

    private void initComponents() {
        JPanel main = new JPanel(new BorderLayout(10, 10));
        main.setBorder(new EmptyBorder(10,10,10,10));
        setContentPane(main);

        JPanel top = new JPanel(new FlowLayout(FlowLayout.LEFT));
        btnAgregar = new JButton("Agregar Partido");
        btnAgregar.addActionListener(e -> openAddDialog());
        top.add(btnAgregar);
        main.add(top, BorderLayout.NORTH);

        panelPartidos = new JPanel();
        panelPartidos.setLayout(new BoxLayout(panelPartidos, BoxLayout.Y_AXIS));
        JScrollPane scroll = new JScrollPane(panelPartidos);
        scroll.setPreferredSize(new Dimension(250, 0));
        main.add(scroll, BorderLayout.WEST);

        JPanel center = new JPanel(new BorderLayout(10,10));
        JPanel controls = new JPanel(new FlowLayout(FlowLayout.LEFT));
        cbDepto = new JComboBox<>(new String[]{"Nacional","La Paz","Cochabamba","Santa Cruz","Chuquisaca","Tarija","Potosi","Beni","Pando","Oruro"});
        cbDepto.addActionListener(e -> updateMap());
        controls.add(new JLabel("Departamento:"));
        controls.add(cbDepto);

        cbChartType = new JComboBox<>(new String[]{"Votos","Escaños Senado","Escaños Diputados","Victoria"});
        cbChartType.addActionListener(e -> redrawChart());
        controls.add(new JLabel("Ver:"));
        controls.add(cbChartType);

        center.add(controls, BorderLayout.NORTH);

        panelChart = new JPanel(new BorderLayout());
        center.add(panelChart, BorderLayout.CENTER);

        lblSecondRound = new JLabel("Prob. Segunda Vuelta: N/A");
        center.add(lblSecondRound, BorderLayout.SOUTH);

        main.add(center, BorderLayout.CENTER);

        JPanel side = new JPanel(new BorderLayout(5,5));
        lblMap = new JLabel();
        side.add(lblMap, BorderLayout.CENTER);
        main.add(side, BorderLayout.EAST);
        this.lblSecondRound = lblSecondRound;

        JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        btnCalcular = new JButton("Calcular");
        btnCalcular.addActionListener(e -> runSimulation());
        bottom.add(btnCalcular);
        btnExportar = new JButton("Exportar");
        btnExportar.setEnabled(false);
        btnExportar.addActionListener(e -> exportResults());
        bottom.add(btnExportar);
        main.add(bottom, BorderLayout.SOUTH);

        loadMapImages();
        updateMap();
    }

    private void openAddDialog() {
        JDialog dlg = new JDialog(this, "Agregar Partido", true);
        dlg.setSize(450, 400);
        dlg.setLayout(new GridLayout(0, 2, 5, 5));
        dlg.setLocationRelativeTo(this);

        JTextField tfName = new JTextField();
        JTextField tfMean = new JTextField();
        JTextField tfStd = new JTextField();
        JTextField tfColorHex = new JTextField("#000000");

        JLabel lblFotoCand = new JLabel("Sin seleccionar");
        JLabel lblFotoPartido = new JLabel("Sin seleccionar");

        final File[] archivoCand = {null};
        final File[] archivoPartido = {null};

        JButton btnFotoCand = new JButton("Seleccionar Candidato");
        btnFotoCand.addActionListener(e -> {
            JFileChooser fc = new JFileChooser();
            int result = fc.showOpenDialog(dlg);
            if (result == JFileChooser.APPROVE_OPTION) {
                archivoCand[0] = fc.getSelectedFile();
                lblFotoCand.setText(archivoCand[0].getName());
            }
        });

        JButton btnFotoPartido = new JButton("Seleccionar Logo Partido");
        btnFotoPartido.addActionListener(e -> {
            JFileChooser fc = new JFileChooser();
            int result = fc.showOpenDialog(dlg);
            if (result == JFileChooser.APPROVE_OPTION) {
                archivoPartido[0] = fc.getSelectedFile();
                lblFotoPartido.setText(archivoPartido[0].getName());
            }
        });

        JButton btnGuardar = new JButton("Guardar");
        btnGuardar.addActionListener(e -> {
            try {
                String nombre = tfName.getText().trim();
                double media = Double.parseDouble(tfMean.getText());
                double desv = Double.parseDouble(tfStd.getText());
                String colorHex = tfColorHex.getText().trim();

                if (!colorHex.matches("^#[0-9a-fA-F]{6}$")) {
                    JOptionPane.showMessageDialog(dlg, "Color no válido. Use formato #RRGGBB.");
                    return;
                }

                Partido p = new Partido(nombre, media, desv, archivoCand[0], archivoPartido[0], colorHex);
                partidos.add(p);
                addPartidoPreview(p);

                dlg.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(dlg, "Verifique los campos numéricos.");
            }
        });

        dlg.add(new JLabel("Nombre del Partido:")); dlg.add(tfName);
        dlg.add(new JLabel("Media Histórica (%):")); dlg.add(tfMean);
        dlg.add(new JLabel("Desviación Estándar:")); dlg.add(tfStd);
        dlg.add(new JLabel("Color (#RRGGBB):")); dlg.add(tfColorHex);
        dlg.add(btnFotoCand); dlg.add(lblFotoCand);
        dlg.add(btnFotoPartido); dlg.add(lblFotoPartido);
        dlg.add(new JLabel()); dlg.add(btnGuardar);

        dlg.setVisible(true);
    }

    private void addPartidoPreview(Partido p) {
        JPanel card = new JPanel();
        card.setLayout(new BorderLayout());
        card.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        card.setBackground(p.getColorAWT());

        JLabel lblNombre = new JLabel(p.getNombre());
        lblNombre.setHorizontalAlignment(SwingConstants.CENTER);
        card.add(lblNombre, BorderLayout.NORTH);

        JLabel img = new JLabel();
        if (p.getFotoCandidato() != null) {
            img.setIcon(new ImageIcon(p.getFotoCandidato().getAbsolutePath()));
        }
        img.setHorizontalAlignment(SwingConstants.CENTER);
        card.add(img, BorderLayout.CENTER);

        panelPartidos.add(card);
        panelPartidos.revalidate();
        panelPartidos.repaint();
    }

    private void runSimulation() {
        sims = askNumSimulations();
        java.util.List<String> departamentos = Arrays.asList(
            "nacional", "la_paz", "cochabamba", "santa_cruz", "chuquisaca",
            "tarija", "potosi", "beni", "pando", "oruro"
        );

        for (String dpto : departamentos) {
            Map<String, Map<String, Double>> resultados = simularDepartamento(dpto, sims);
            resultadosPorDepto.put(dpto, resultados);
        }

        String seleccionado = ((String) cbDepto.getSelectedItem()).toLowerCase().replace(" ", "_");
        mostrarResultadosDepartamento(seleccionado);
        btnExportar.setEnabled(true);
    }
    
    private Map<String, Map<String, Double>> simularDepartamento(String nombre, int repeticiones) {
        Map<String, Double> sumaVotos = new HashMap<>();
        Map<String, Double> sumaEscSenado = new HashMap<>();
        Map<String, Double> sumaEscDip = new HashMap<>();
        Map<String, Double> sumaVictoria = new HashMap<>();
        double cuentaSegundaVuelta = 0;

        Random rand = new Random();

        for (int i = 0; i < repeticiones; i++) {
            Map<String, Double> votos = new HashMap<>();
            double total = 0;

            for (Partido p : partidos) {
                double val = rand.nextGaussian() * p.getDesviacion() + p.getMedia();
                if (val < 0) val = 0;
                votos.put(p.getNombre(), val);
                total += val;
            }

            for (String key : votos.keySet()) {
                votos.put(key, votos.get(key) / total * 100);
            }

            java.util.List<Map.Entry<String, Double>> orden = new ArrayList<>(votos.entrySet());
            orden.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));
            String ganador = orden.get(0).getKey();
            String segundo = orden.get(1).getKey();
            double pct1 = orden.get(0).getValue();
            double pct2 = orden.get(1).getValue();

            if (!(pct1 > 50 || (pct1 >= 40 && pct1 - pct2 >= 10))) {
                cuentaSegundaVuelta++;
            }

            for (String key : votos.keySet()) {
                sumaVotos.put(key, sumaVotos.getOrDefault(key, 0.0) + votos.get(key));
                sumaVictoria.put(key, sumaVictoria.getOrDefault(key, 0.0) + (key.equals(ganador) ? 1 : 0));
            }

            Map<String, Integer> escSen = asignarDHondt(votos, 4);
            Map<String, Integer> escDip = asignarDHondt(votos, 10);

            for (String key : escSen.keySet()) {
                sumaEscSenado.put(key, sumaEscSenado.getOrDefault(key, 0.0) + escSen.get(key));
                sumaEscDip.put(key, sumaEscDip.getOrDefault(key, 0.0) + escDip.get(key));
            }
        }

        Map<String, Map<String, Double>> resultados = new HashMap<>();
        Map<String, Double> mapVotos = new HashMap<>();
        Map<String, Double> mapSenado = new HashMap<>();
        Map<String, Double> mapDip = new HashMap<>();
        Map<String, Double> mapVictoria = new HashMap<>();
        Map<String, Double> mapSegunda = new HashMap<>();

        for (String key : sumaVotos.keySet()) {
            mapVotos.put(key, sumaVotos.get(key) / repeticiones);
            mapSenado.put(key, sumaEscSenado.getOrDefault(key, 0.0) / repeticiones);
            mapDip.put(key, sumaEscDip.getOrDefault(key, 0.0) / repeticiones);
            mapVictoria.put(key, sumaVictoria.getOrDefault(key, 0.0) * 100 / repeticiones);
        }

        mapSegunda.put("valor", cuentaSegundaVuelta * 100 / repeticiones);

        resultados.put("votos", mapVotos);
        resultados.put("senado", mapSenado);
        resultados.put("diputados", mapDip);
        resultados.put("victoria", mapVictoria);
        resultados.put("segunda_vuelta", mapSegunda);

        return resultados;
    }

    
    private void mostrarResultadosDepartamento(String dpto) {
        Map<String, Map<String, Double>> resultados = resultadosPorDepto.get(dpto);
        if (resultados == null) return;

        resultadoVotos = resultados.get("votos");
        resultadoEscSenado = resultados.get("senado");
        resultadoEscDip = resultados.get("diputados");
        resultadoVictoria = resultados.get("victoria");
        probSegundaVuelta = resultados.get("segunda_vuelta").get("valor");

        redrawChart();
    }

    private Map<String, Integer> asignarDHondt(Map<String, Double> votos, int escaños) {
        Map<String, Integer> asignados = new HashMap<>();
        for (String partido : votos.keySet()) asignados.put(partido, 0);

        java.util.List<Map.Entry<String, Double>> cocientes = new ArrayList<>();
        for (String partido : votos.keySet()) {
            double voto = votos.get(partido);
            for (int i = 1; i <= escaños; i++) {
                cocientes.add(new AbstractMap.SimpleEntry<>(partido, voto / i));
            }
        }
        cocientes.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));
        for (int i = 0; i < escaños; i++) {
            String partido = cocientes.get(i).getKey();
            asignados.put(partido, asignados.get(partido) + 1);
        }
        return asignados;
    }

    private int askNumSimulations() {
        String inp = JOptionPane.showInputDialog(this, "Número de simulaciones:", "1000");
        try { return Integer.parseInt(inp); } catch (Exception e) { return 1000; }
    }
    
    private void exportResults() {
        int repeticiones = sims;

        for (String dpto : resultadosPorDepto.keySet()) {
            Map<String, Map<String, Double>> resultados = resultadosPorDepto.get(dpto);

            Map<String, Double> votos = resultados.get("votos");
            Map<String, Double> victoria = resultados.get("victoria");
            Map<String, Double> senado = resultados.get("senado");
            Map<String, Double> diputados = resultados.get("diputados");
            double segunda = resultados.get("segunda_vuelta").get("valor");

            Map<String, Integer> victoriaEntero = new HashMap<>();
            for (String k : victoria.keySet()) {
                victoriaEntero.put(k, (int)(victoria.get(k) * repeticiones / 100));
            }

            Map<String, Integer> senadoInt = new HashMap<>();
            Map<String, Integer> diputadosInt = new HashMap<>();
            for (String k : senado.keySet()) {
                senadoInt.put(k, (int)Math.round(senado.get(k) * repeticiones));
                diputadosInt.put(k, (int)Math.round(diputados.get(k) * repeticiones));
            }

            ExportadorResultados.exportarCSV(
                dpto + ".csv",
                votos,
                victoriaEntero,
                repeticiones,
                senadoInt,
                diputadosInt,
                (int)(segunda * repeticiones / 100)
            );
        }

        JOptionPane.showMessageDialog(this, "¡Exportación completada!");
    }
    

    private void redrawChart() {
        panelChart.removeAll();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        String tipo = (String) cbChartType.getSelectedItem();

        for (Partido p : partidos) {
            String nombre = p.getNombre();
            double valor = switch (tipo) {
                case "Votos" -> resultadoVotos.getOrDefault(nombre, 0.0);
                case "Escaños Senado" -> resultadoEscSenado.getOrDefault(nombre, 0.0);
                case "Escaños Diputados" -> resultadoEscDip.getOrDefault(nombre, 0.0);
                case "Victoria" -> resultadoVictoria.getOrDefault(nombre, 0.0);
                default -> 0.0;
            };
            dataset.addValue(valor, nombre, "");
        }

        JFreeChart chart = ChartFactory.createBarChart("", "Partido", "Valor", dataset);
        CategoryPlot plot = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        for (int i = 0; i < partidos.size(); i++) {
            renderer.setSeriesPaint(i, partidos.get(i).getColorAWT());
        }
        ChartPanel cp = new ChartPanel(chart);
        panelChart.add(cp, BorderLayout.CENTER);
        panelChart.revalidate();

        lblSecondRound.setText("Prob. Segunda Vuelta: " + String.format("%.2f%%", probSegundaVuelta));
    }

    private void loadMapImages() {
        String[] keys = {"Nacional","La Paz","Cochabamba","Santa Cruz","Chuquisaca","Tarija","Potosi","Beni","Pando","Oruro"};
        for (String k: keys) {
            try {
                mapas.put(k, new ImageIcon(ImageIO.read(new File("maps/"+k+".png"))));
            } catch (Exception e) {
                mapas.put(k, null);
            }
        }
    }

    private void updateMap() {
        String sel = ((String) cbDepto.getSelectedItem()).toLowerCase().replace(" ", "_");
        mostrarResultadosDepartamento(sel);
        lblMap.setIcon(mapas.get((String) cbDepto.getSelectedItem()));
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SimulacionElectoralGUI().setVisible(true));
    }
    
    private void precargarPartidos() {
        partidos.add(new Partido("MAS", 40, 5, new File("Participantes/Mas.png"), new File("Partidos/MAS-IPSP_IO.png"), "#1A237E"));
        partidos.add(new Partido("UNIDAD", 30, 5, new File("Participantes/Unidad.png"), new File("Partidos/Unidad.png"), "#388E3C"));
        partidos.add(new Partido("ALIANZA LIBRE", 20, 3, new File("Participantes/AlianzaLibre.png"), new File("Partidos/Alianza_Libre.png"), "#D32F2F"));
        partidos.add(new Partido("SUMATE", 15, 4, new File("Participantes/ManfredReyesVilla_Cropped.png"), new File("Partidos/Sumate.png"), "#FBC02D"));


        for (Partido p : partidos) {
            addPartidoPreview(p); // actualiza la vista
        }
    }
}
